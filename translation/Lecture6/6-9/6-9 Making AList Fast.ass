[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Audio File: 6-9 Making AList Fast.mp4
Video File: 6-9 Making AList Fast.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.500000
Scroll Position: 175
Active Line: 176

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: zh - 黄色,微软雅黑,60,&H0080FFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: en - 白色,Yu Gothic UI,45,&H00FFFFFF,&H000000FF,&H55000000,&H63000000,-1,0,0,0,100,100,0,0,1,4,0,2,3,3,16,1
Style: 翻译人员专属 - 左下角,微软雅黑,58,&H008DE3FF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,3,0,1,42,32,42,1
Style: 翻译人员专属 - 片尾（左上角）,微软雅黑,58,&H008DE3FF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,3,0,7,42,32,42,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:03.00,翻译人员专属 - 片尾（左上角）,,0,0,0,, 翻译：@隐秀_（seriouszyx）
Dialogue: 0,0:00:01.00,0:00:04.07,en - 白色,,0,0,0,,This brings us to our final clever improvement to the AList class.
Dialogue: 0,0:00:01.00,0:00:04.07,zh - 黄色,,0,0,0,,这是我们对 AList 类最后一次巧妙的改进
Dialogue: 0,0:00:04.43,0:00:06.73,en - 白色,,0,0,0,,How do turn this horrible--
Dialogue: 0,0:00:04.43,0:00:06.73,zh - 黄色,,0,0,0,,怎么把可怕的..
Dialogue: 0,0:00:06.73,0:00:08.13,en - 白色,,0,0,0,,I don't know why I said it that way--
Dialogue: 0,0:00:06.73,0:00:08.13,zh - 黄色,,0,0,0,,我不知道为什么这么说
Dialogue: 0,0:00:08.61,0:00:10.86,en - 白色,,0,0,0,,horrible parabola into this beautiful line.
Dialogue: 0,0:00:08.61,0:00:10.86,zh - 黄色,,0,0,0,,把可怕的抛物线变成这条美丽的直线
Dialogue: 0,0:00:11.99,0:00:13.76,en - 白色,,0,0,0,,So if we look at this resize method here--
Dialogue: 0,0:00:11.99,0:00:13.76,zh - 黄色,,0,0,0,,看看这个 resize 方法
Dialogue: 0,0:00:14.98,0:00:16.25,en - 白色,,0,0,0,,sorry, this code right here--
Dialogue: 0,0:00:14.98,0:00:16.25,zh - 黄色,,0,0,0,,抱歉，这里的代码...
Dialogue: 0,0:00:16.25,0:00:17.05,en - 白色,,0,0,0,,that's our problem.
Dialogue: 0,0:00:16.25,0:00:17.05,zh - 黄色,,0,0,0,,这是问题所在
Dialogue: 0,0:00:17.05,0:00:18.14,en - 白色,,0,0,0,,Something here is broken.
Dialogue: 0,0:00:17.05,0:00:18.14,zh - 黄色,,0,0,0,,这里某些东西有问题
Dialogue: 0,0:00:18.42,0:00:21.36,en - 白色,,0,0,0,,And what I want you to do is try and consider how you might fix this.
Dialogue: 0,0:00:18.42,0:00:21.36,zh - 黄色,,0,0,0,,试着考虑如何解决这个问题
Dialogue: 0,0:00:21.94,0:00:25.44,en - 白色,,0,0,0,,Now, the solution to this problem is actually a bit tricky.
Dialogue: 0,0:00:21.94,0:00:25.44,zh - 黄色,,0,0,0,,解决这个问题实际上有点棘手
Dialogue: 0,0:00:26.26,0:00:28.64,en - 白色,,0,0,0,,And even after I show you, you might be a little mystified.
Dialogue: 0,0:00:26.26,0:00:28.64,zh - 黄色,,0,0,0,,即使我演示后，你也可能会有点困惑
Dialogue: 0,0:00:28.99,0:00:30.53,en - 白色,,0,0,0,,And we'll cover the analysis later.
Dialogue: 0,0:00:28.99,0:00:30.53,zh - 黄色,,0,0,0,,稍后会介绍分析
Dialogue: 0,0:00:31.76,0:00:33.67,en - 白色,,0,0,0,,But why don't what you do is maybe give it a shot.
Dialogue: 0,0:00:31.76,0:00:33.67,zh - 黄色,,0,0,0,,但你为什么不试一试呢？
Dialogue: 0,0:00:33.67,0:00:36.95,en - 白色,,0,0,0,,Maybe even try out the AList speed test to test your solution.
Dialogue: 0,0:00:33.67,0:00:36.95,zh - 黄色,,0,0,0,,尝试测试你的 AList 解决方案的速度
Dialogue: 0,0:00:36.95,0:00:38.20,en - 白色,,0,0,0,,And I'll spoil it in a moment.
Dialogue: 0,0:00:36.95,0:00:38.20,zh - 黄色,,0,0,0,,一会揭晓
Dialogue: 0,0:00:40.95,0:00:44.03,en - 白色,,0,0,0,,So let's actually go back to our speed testing environment,
Dialogue: 0,0:00:40.95,0:00:44.03,zh - 黄色,,0,0,0,,回到速度测试环境
Dialogue: 0,0:00:44.57,0:00:45.59,en - 白色,,0,0,0,,and let's look at our AList class.
Dialogue: 0,0:00:44.57,0:00:45.59,zh - 黄色,,0,0,0,,看看 AList
Dialogue: 0,0:00:46.05,0:00:46.94,en - 白色,,0,0,0,,This is our trouble.
Dialogue: 0,0:00:46.05,0:00:46.94,zh - 黄色,,0,0,0,,这是我们的麻烦
Dialogue: 0,0:00:47.42,0:00:50.96,en - 白色,,0,0,0,,So perhaps you thought, what if I increase the amount by which we resize?
Dialogue: 0,0:00:47.42,0:00:50.96,zh - 黄色,,0,0,0,,你可能会想，如果增加 resize 的数量怎么样？
Dialogue: 0,0:00:50.96,0:00:53.11,en - 白色,,0,0,0,,Maybe by, I don't know, from 1 to 10.
Dialogue: 0,0:00:50.96,0:00:53.11,zh - 黄色,,0,0,0,,也许从1改到10
Dialogue: 0,0:00:53.82,0:00:57.53,en - 白色,,0,0,0,,So if I recompile my code and now I do speed test AList,
Dialogue: 0,0:00:53.82,0:00:57.53,zh - 黄色,,0,0,0,,重新编译，执行速度测试
Dialogue: 0,0:00:58.68,0:00:59.96,en - 白色,,0,0,0,,I'll see it's fast.
Dialogue: 0,0:00:58.68,0:00:59.96,zh - 黄色,,0,0,0,,很快
Dialogue: 0,0:00:59.96,0:01:02.30,en - 白色,,0,0,0,,It's not as fast as the SLList, but it's pretty fast.
Dialogue: 0,0:00:59.96,0:01:02.30,zh - 黄色,,0,0,0,,没有 SLList 快，但相当快
Dialogue: 0,0:01:03.03,0:01:04.96,en - 白色,,0,0,0,,And while that seems to be a big improvement,
Dialogue: 0,0:01:03.03,0:01:04.96,zh - 黄色,,0,0,0,,虽然这似乎是一个很大的进步
Dialogue: 0,0:01:04.96,0:01:08.63,en - 白色,,0,0,0,,there's actually something a little subtle here that's tricky.
Dialogue: 0,0:01:04.96,0:01:08.63,zh - 黄色,,0,0,0,,实际上这里有些很棘手的微妙的东西
Dialogue: 0,0:01:09.13,0:01:10.73,en - 白色,,0,0,0,,I mean, as subtle things often are.
Dialogue: 0,0:01:09.13,0:01:10.73,zh - 黄色,,0,0,0,,微妙的事情往往如此
Dialogue: 0,0:01:11.18,0:01:15.22,en - 白色,,0,0,0,,And that's if we increase our speed test AList runtime up to a million,
Dialogue: 0,0:01:11.18,0:01:15.22,zh - 黄色,,0,0,0,,如果将速度测试运行时间增加到一百万
Dialogue: 0,0:01:16.57,0:01:18.35,en - 白色,,0,0,0,,and now we try running it again,
Dialogue: 0,0:01:16.57,0:01:18.35,zh - 黄色,,0,0,0,,再试一次
Dialogue: 0,0:01:20.36,0:01:21.07,en - 白色,,0,0,0,,it's quite slow.
Dialogue: 0,0:01:20.36,0:01:21.07,zh - 黄色,,0,0,0,,相当慢
Dialogue: 0,0:01:21.65,0:01:22.85,en - 白色,,0,0,0,,It should not be like this.
Dialogue: 0,0:01:21.65,0:01:22.85,zh - 黄色,,0,0,0,,不应该这样
Dialogue: 0,0:01:22.85,0:01:25.35,en - 白色,,0,0,0,,In fact, it's taking quite a long time.
Dialogue: 0,0:01:22.85,0:01:25.35,zh - 黄色,,0,0,0,,这需要相当长的时间
Dialogue: 0,0:01:25.35,0:01:28.00,en - 白色,,0,0,0,,So even though we increased this size up to 10,
Dialogue: 0,0:01:25.35,0:01:28.00,zh - 黄色,,0,0,0,,使我们把这个大小增加到10
Dialogue: 0,0:01:28.42,0:01:30.09,en - 白色,,0,0,0,,we were only kind of hiding the problem.
Dialogue: 0,0:01:28.42,0:01:30.09,zh - 黄色,,0,0,0,,只是在某种程度上隐瞒了问题
Dialogue: 0,0:01:30.09,0:01:31.82,en - 白色,,0,0,0,,There's still a big problem here.
Dialogue: 0,0:01:30.09,0:01:31.82,zh - 黄色,,0,0,0,,大问题仍然存在
Dialogue: 0,0:01:32.54,0:01:35.64,en - 白色,,0,0,0,,So there's actually a bigger, better solution,
Dialogue: 0,0:01:32.54,0:01:35.64,zh - 黄色,,0,0,0,,实际上有一个更好的解决方案
Dialogue: 0,0:01:36.05,0:01:39.95,en - 白色,,0,0,0,,which is rather than adding 10, I'm going to multiply by some number.
Dialogue: 0,0:01:36.05,0:01:39.95,zh - 黄色,,0,0,0,,不是加10，而是乘以某个数字
Dialogue: 0,0:01:39.95,0:01:40.90,en - 白色,,0,0,0,,Let's say two.
Dialogue: 0,0:01:39.95,0:01:40.90,zh - 黄色,,0,0,0,,比如2
Dialogue: 0,0:01:41.95,0:01:46.22,en - 白色,,0,0,0,,So let's try now by multiplying the size of our array.
Dialogue: 0,0:01:41.95,0:01:46.22,zh - 黄色,,0,0,0,,现在乘以数组的大小来试试
Dialogue: 0,0:01:46.73,0:01:48.92,en - 白色,,0,0,0,,If we try running it, it's quite fast.
Dialogue: 0,0:01:46.73,0:01:48.92,zh - 黄色,,0,0,0,,运行，相当快
Dialogue: 0,0:01:48.92,0:01:50.04,en - 白色,,0,0,0,,Look how fast it is.
Dialogue: 0,0:01:48.92,0:01:50.04,zh - 黄色,,0,0,0,,看看多快
Dialogue: 0,0:01:50.04,0:01:52.05,en - 白色,,0,0,0,,In fact, I can crank this thing up to 10 million.
Dialogue: 0,0:01:50.04,0:01:52.05,zh - 黄色,,0,0,0,,事实上我可以把这玩意儿开到1000万
Dialogue: 0,0:01:52.46,0:01:53.47,en - 白色,,0,0,0,,Try running it again.
Dialogue: 0,0:01:52.46,0:01:53.47,zh - 黄色,,0,0,0,,再运行一次
Dialogue: 0,0:01:53.93,0:01:55.08,en - 白色,,0,0,0,,It should still be pretty fast.
Dialogue: 0,0:01:53.93,0:01:55.08,zh - 黄色,,0,0,0,,仍然很快
Dialogue: 0,0:01:55.73,0:01:58.16,en - 白色,,0,0,0,,And that's actually the state-of-the-art approach.
Dialogue: 0,0:01:55.73,0:01:58.16,zh - 黄色,,0,0,0,,这实际上是最先进的方法
Dialogue: 0,0:01:58.16,0:02:00.68,en - 白色,,0,0,0,,And real lists, like the list inside of Python,
Dialogue: 0,0:01:58.16,0:02:00.68,zh - 黄色,,0,0,0,,而真正的链表，比如 Python 中的 list
Dialogue: 0,0:02:00.68,0:02:02.68,en - 白色,,0,0,0,,basically uses this multiplicative trick.
Dialogue: 0,0:02:00.68,0:02:02.68,zh - 黄色,,0,0,0,,基本上就是用这个乘法技巧
Dialogue: 0,0:02:03.56,0:02:05.91,en - 白色,,0,0,0,,So what we have right here.
Dialogue: 0,0:02:03.56,0:02:05.91,zh - 黄色,,0,0,0,,我们现在有的是
Dialogue: 0,0:02:05.91,0:02:13.40,en - 白色,,0,0,0,,this addLast approach, where we add some random factor or some scaling factor, r-factor, this is unusably bad.
Dialogue: 0,0:02:05.91,0:02:13.40,zh - 黄色,,0,0,0,,这个 addLast 方法，添加一些随机因素、缩放因素、r 因素，这是非常糟糕的
Dialogue: 0,0:02:13.40,0:02:16.36,en - 白色,,0,0,0,,The resizing factor, if used in an additive way,
Dialogue: 0,0:02:13.40,0:02:16.36,zh - 黄色,,0,0,0,,使用加法调整大小
Dialogue: 0,0:02:16.60,0:02:17.91,en - 白色,,0,0,0,,it's just not going to work.
Dialogue: 0,0:02:16.60,0:02:17.91,zh - 黄色,,0,0,0,,这是行不通的
Dialogue: 0,0:02:17.91,0:02:20.34,en - 白色,,0,0,0,,I mean, unless you cheat and you make r-factor super big.
Dialogue: 0,0:02:17.91,0:02:20.34,zh - 黄色,,0,0,0,,除非你作弊让 r 因子变得超级大
Dialogue: 0,0:02:20.34,0:02:23.50,en - 白色,,0,0,0,,But then that's cheating, because then you just keep around a size billion list.
Dialogue: 0,0:02:20.34,0:02:23.50,zh - 黄色,,0,0,0,,但那是作弊，因为这样你要维护一个10亿大小的链表
Dialogue: 0,0:02:23.50,0:02:24.59,en - 白色,,0,0,0,,I mean, of course that works.
Dialogue: 0,0:02:23.50,0:02:24.59,zh - 黄色,,0,0,0,,当然也管用
Dialogue: 0,0:02:25.76,0:02:30.79,en - 白色,,0,0,0,,By contrast, if we actually use a multiplicative or geometric rescaling,
Dialogue: 0,0:02:25.76,0:02:30.79,zh - 黄色,,0,0,0,,相比之下，使用乘法或几何重定比例
Dialogue: 0,0:02:30.80,0:02:32.27,en - 白色,,0,0,0,,then we get great performance.
Dialogue: 0,0:02:30.80,0:02:32.27,zh - 黄色,,0,0,0,,就会有很好的表现
Dialogue: 0,0:02:32.27,0:02:33.21,en - 白色,,0,0,0,,This is wonderful.
Dialogue: 0,0:02:32.27,0:02:33.21,zh - 黄色,,0,0,0,,这太棒了
Dialogue: 0,0:02:33.71,0:02:36.23,en - 白色,,0,0,0,,This is how all kinds of lists out there are implemented.
Dialogue: 0,0:02:33.71,0:02:36.23,zh - 黄色,,0,0,0,,这就是各种链表的实现方式
Dialogue: 0,0:02:36.62,0:02:38.54,en - 白色,,0,0,0,,But we can't do the analysis yet.
Dialogue: 0,0:02:36.62,0:02:38.54,zh - 黄色,,0,0,0,,但我们还不能做分析
Dialogue: 0,0:02:38.54,0:02:41.09,en - 白色,,0,0,0,,We're going to wait till after the midterm to go into detail.
Dialogue: 0,0:02:38.54,0:02:41.09,zh - 黄色,,0,0,0,,等到期中考试后再详细讨论
Dialogue: 0,0:02:41.09,0:02:44.91,en - 白色,,0,0,0,,So for now, we'll treat it as some kind of wizard magic that this is the right approach.
Dialogue: 0,0:02:41.09,0:02:44.91,zh - 黄色,,0,0,0,,现在把它当作某种巫术，看作是正确的方法
Dialogue: 0,0:02:45.68,0:02:48.54,en - 白色,,0,0,0,,Now, there's still a little bit more we want to do,
Dialogue: 0,0:02:45.68,0:02:48.54,zh - 黄色,,0,0,0,,现在还有更多的事情要做
Dialogue: 0,0:02:49.23,0:02:53.54,en - 白色,,0,0,0,,which is that occasionally, we'll have an issue where our list gets super big.
Dialogue: 0,0:02:49.23,0:02:53.54,zh - 黄色,,0,0,0,,偶尔遇到的问题使链表变得超级大
Dialogue: 0,0:02:53.54,0:02:54.88,en - 白色,,0,0,0,,It goes up to a billion items.
Dialogue: 0,0:02:53.54,0:02:54.88,zh - 黄色,,0,0,0,,大到10亿项
Dialogue: 0,0:02:55.44,0:02:57.76,en - 白色,,0,0,0,,And then we remove 999 million items.
Dialogue: 0,0:02:55.44,0:02:57.76,zh - 黄色,,0,0,0,,然后删掉9.99亿项
Dialogue: 0,0:02:58.25,0:03:04.55,en - 白色,,0,0,0,,So at that point, we're only using 1% of our available-- of our array, and that's wasteful, right?
Dialogue: 0,0:02:58.25,0:03:04.55,zh - 黄色,,0,0,0,,此时我们只使用了可用数组的1%，这是浪费对吧？
Dialogue: 0,0:03:04.55,0:03:08.51,en - 白色,,0,0,0,,I mean, we could always make a list fast that uses an array by keeping a giant array,
Dialogue: 0,0:03:04.55,0:03:08.51,zh - 黄色,,0,0,0,,我们可以通过维持一个巨大的数组来使链表更快
Dialogue: 0,0:03:08.51,0:03:10.19,en - 白色,,0,0,0,,but that's just a waste of space.
Dialogue: 0,0:03:08.51,0:03:10.19,zh - 黄色,,0,0,0,,但有点浪费空间
Dialogue: 0,0:03:10.80,0:03:14.21,en - 白色,,0,0,0,,And so the question is what do we actually want to do to make this better?
Dialogue: 0,0:03:10.80,0:03:14.21,zh - 黄色,,0,0,0,,问题是我们究竟要做什么来使之更好？
Dialogue: 0,0:03:16.79,0:03:17.80,en - 白色,,0,0,0,,I kind of spoiled that problem.
Dialogue: 0,0:03:16.79,0:03:17.80,zh - 黄色,,0,0,0,,我有点破坏这个问题了
Dialogue: 0,0:03:18.24,0:03:19.20,en - 白色,,0,0,0,,OK, that's fine.
Dialogue: 0,0:03:18.24,0:03:19.20,zh - 黄色,,0,0,0,,好的
Dialogue: 0,0:03:20.12,0:03:21.68,en - 白色,,0,0,0,,So what can we do to make it better?
Dialogue: 0,0:03:20.12,0:03:21.68,zh - 黄色,,0,0,0,,怎么让它变得更好？
Dialogue: 0,0:03:22.14,0:03:29.24,en - 白色,,0,0,0,,Well, often what we'll say is an array list has a usage ratio, you might call it, or a load factor.
Dialogue: 0,0:03:22.14,0:03:29.24,zh - 黄色,,0,0,0,,通常数组链表有一个使用率，你可以称之负载因子
Dialogue: 0,0:03:29.76,0:03:34.51,en - 白色,,0,0,0,,And that's simply the size of the array divided by the length of the-- sorry,
Dialogue: 0,0:03:29.76,0:03:34.51,zh - 黄色,,0,0,0,,这就是数组的大小除以...抱歉
Dialogue: 0,0:03:34.64,0:03:38.63,en - 白色,,0,0,0,,the size of the list divided by the length of the array that represents the list.
Dialogue: 0,0:03:34.64,0:03:38.63,zh - 黄色,,0,0,0,,链表的大小除以它代表的数组的长度
Dialogue: 0,0:03:39.11,0:03:44.73,en - 白色,,0,0,0,,So often what you'll do is if the load factor, that usage ratio, falls below 25%,
Dialogue: 0,0:03:39.11,0:03:44.73,zh - 黄色,,0,0,0,,通常你会做的是，如果负载率，即使用率，降到25%以下
Dialogue: 0,0:03:45.13,0:03:47.04,en - 白色,,0,0,0,,then you'll half the array size.
Dialogue: 0,0:03:45.13,0:03:47.04,zh - 黄色,,0,0,0,,数组大小将减半
Dialogue: 0,0:03:47.51,0:03:49.29,en - 白色,,0,0,0,,And we'll do some more details on this in a few weeks.
Dialogue: 0,0:03:47.51,0:03:49.29,zh - 黄色,,0,0,0,,我们将在几周内详细对比
Dialogue: 0,0:03:49.29,0:03:57.23,en - 白色,,0,0,0,,So just as an example, let's say we have here an array that it has length 100, but the list is only size four.
Dialogue: 0,0:03:49.29,0:03:57.23,zh - 黄色,,0,0,0,,举个例子，假设这里有一个长度为100的数组，但链表大小只有4
Dialogue: 0,0:03:57.58,0:04:00.01,en - 白色,,0,0,0,,So the usage ratio here is only 4%.
Dialogue: 0,0:03:57.58,0:04:00.01,zh - 黄色,,0,0,0,,所以使用率只有4%
Dialogue: 0,0:04:00.51,0:04:04.08,en - 白色,,0,0,0,,That is well less than 25%, so this should have been resized at some point.
Dialogue: 0,0:04:00.51,0:04:04.08,zh - 黄色,,0,0,0,,远远不到25%，应该在某个时候进行调整
Dialogue: 0,0:04:04.64,0:04:09.63,en - 白色,,0,0,0,,And so this actually drives home a really important trade-off between time and space efficiency.
Dialogue: 0,0:04:04.64,0:04:09.63,zh - 黄色,,0,0,0,,这实际上促使人们在时间和空间效率之间进行了非常重要的权衡
Dialogue: 0,0:04:09.63,0:04:11.09,en - 白色,,0,0,0,,We'll see this over and over again.
Dialogue: 0,0:04:09.63,0:04:11.09,zh - 黄色,,0,0,0,,我们会一遍又一遍地看到这点
Dialogue: 0,0:04:11.09,0:04:15.24,en - 白色,,0,0,0,,We'll talk about things like hash tables and how we can exploit space to save time.
Dialogue: 0,0:04:11.09,0:04:15.24,zh - 黄色,,0,0,0,,我们将讨论哈希表等内容，以及如何利用空间来节省时间
Dialogue: 0,0:04:16.32,0:04:17.82,en - 白色,,0,0,0,,That will be a big theme of course.
Dialogue: 0,0:04:16.32,0:04:17.82,zh - 黄色,,0,0,0,,这将是一个很大的主题
Dialogue: 0,0:04:18.39,0:04:21.53,en - 白色,,0,0,0,,So with that, we have now built basically an array list.
Dialogue: 0,0:04:18.39,0:04:21.53,zh - 黄色,,0,0,0,,至此，我们基本上构建了一个数组链表
Dialogue: 0,0:04:21.73,0:04:23.28,en - 白色,,0,0,0,,We have to do a little bit more tweaking,
Dialogue: 0,0:04:21.73,0:04:23.28,zh - 黄色,,0,0,0,,还需要做更多的调整
Dialogue: 0,0:04:23.28,0:04:25.28,en - 白色,,0,0,0,,but that's the core idea, the most important stuff.
Dialogue: 0,0:04:23.28,0:04:25.28,zh - 黄色,,0,0,0,,但这是核心思想，也是最重要的东西
Dialogue: 0,0:04:25.99,0:04:30.32,en - 白色,,0,0,0,,And with this next little video, you'll be ready to finish project 1A.
Dialogue: 0,0:04:25.99,0:04:30.32,zh - 黄色,,0,0,0,,看了下段小视频，你就可以完成项目1A 了
Dialogue: 0,0:04:27.32,0:04:30.32,翻译人员专属 - 片尾（左上角）,,0,0,0,, 翻译：@隐秀_（seriouszyx）
