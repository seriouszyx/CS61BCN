[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Audio File: 6-8 Harder Resizing Analysis.mp4
Video File: 6-8 Harder Resizing Analysis.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.500000
Scroll Position: 33
Active Line: 48
Video Position: 5527

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: zh - 黄色,微软雅黑,60,&H0080FFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: en - 白色,Yu Gothic UI,45,&H00FFFFFF,&H000000FF,&H55000000,&H63000000,-1,0,0,0,100,100,0,0,1,4,0,2,3,3,16,1
Style: 翻译人员专属 - 左下角,微软雅黑,58,&H008DE3FF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,3,0,1,42,32,42,1
Style: 翻译人员专属 - 片尾（左上角）,微软雅黑,58,&H008DE3FF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,3,0,7,42,32,42,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:03.00,翻译人员专属 - 片尾（左上角）,,0,0,0,, 翻译：@隐秀_（seriouszyx）
Dialogue: 0,0:00:00.82,0:00:04.00,en - 白色,,0,0,0,,To answer this question, we need only extrapolate from what we just did.
Dialogue: 0,0:00:00.82,0:00:04.00,zh - 黄色,,0,0,0,,要回答这个问题，只需从刚才的情况来推断
Dialogue: 0,0:00:04.54,0:00:11.60,en - 白色,,0,0,0,,We know, for example, that going from capacity 100 to 101 required us to create and fill 101 memory boxes.
Dialogue: 0,0:00:04.54,0:00:11.60,zh - 黄色,,0,0,0,,我们知道从容量为100增加到101需要创建并填满101个内存盒子
Dialogue: 0,0:00:11.98,0:00:13.00,en - 白色,,0,0,0,,That was this picture here.
Dialogue: 0,0:00:11.98,0:00:13.00,zh - 黄色,,0,0,0,,就是这张图片
Dialogue: 0,0:00:13.93,0:00:17.45,en - 白色,,0,0,0,,To go from 101 to 102 is 102 memory boxes, and so forth.
Dialogue: 0,0:00:13.93,0:00:17.45,zh - 黄色,,0,0,0,,从101到102需要102个内存盒子，以此类推
Dialogue: 0,0:00:17.77,0:00:25.62,en - 白色,,0,0,0,,And so ultimately, everything boils down to what is the sum of 101 plus 102 plus dot, dot, dot plus 1,000.
Dialogue: 0,0:00:17.77,0:00:25.62,zh - 黄色,,0,0,0,,所以一切可以归结为 101+102+...+1000
Dialogue: 0,0:00:26.69,0:00:33.54,en - 白色,,0,0,0,,So this is a math problem you might not right now feel comfortable knowing how to solve.
Dialogue: 0,0:00:26.69,0:00:33.54,zh - 黄色,,0,0,0,,这是一个你现在可能觉得不知道如何解决的数学问题
Dialogue: 0,0:00:34.03,0:00:38.00,en - 白色,,0,0,0,,And so one approach is to go to Wolfram Alpha, which is a handy tool.
Dialogue: 0,0:00:34.03,0:00:38.00,zh - 黄色,,0,0,0,,一种方法是使用方便的 Wolfram Alpha
Dialogue: 0,0:00:38.00,0:00:39.69,en - 白色,,0,0,0,,And we can just say equals this.
Dialogue: 0,0:00:38.00,0:00:39.69,zh - 黄色,,0,0,0,,等于这个
Dialogue: 0,0:00:40.65,0:00:41.74,en - 白色,,0,0,0,,And we'll add them all up.
Dialogue: 0,0:00:40.65,0:00:41.74,zh - 黄色,,0,0,0,,会把它们加起来
Dialogue: 0,0:00:41.74,0:00:45.19,en - 白色,,0,0,0,,And we'll say, around 500,000, which gives us our answer.
Dialogue: 0,0:00:41.74,0:00:45.19,zh - 黄色,,0,0,0,,答案是大约50万
Dialogue: 0,0:00:45.98,0:00:48.22,en - 白色,,0,0,0,,Now we don't want to be totally dependent on Wolfram Alpha.
Dialogue: 0,0:00:45.98,0:00:48.22,zh - 黄色,,0,0,0,,现在我们不想完全依赖于 Wolfram Alpha
Dialogue: 0,0:00:48.22,0:00:52.18,en - 白色,,0,0,0,,So in this class later, we're going to use a number of different tricks.
Dialogue: 0,0:00:48.22,0:00:52.18,zh - 黄色,,0,0,0,,所以在这节课后续部分，我们将使用一些不同的技巧
Dialogue: 0,0:00:52.18,0:00:57.28,en - 白色,,0,0,0,,And so here, the trick that is best, the way that you could actually do it without consulting some external tool
Dialogue: 0,0:00:52.18,0:00:57.28,zh - 黄色,,0,0,0,,这里不使用某些外部工具的情况下，你做到这点最好的诀窍是
Dialogue: 0,0:00:57.28,0:01:05.02,en - 白色,,0,0,0,,would be to keep in mind that the sum of 1 plus 2 plus 3 plus dot dot dot up to n is equal to n times n plus 1 over 2.
Dialogue: 0,0:00:57.28,0:01:05.02,zh - 黄色,,0,0,0,,记住1+2+3+...N 的和等于 N*(N+1)/2
Dialogue: 0,0:01:05.41,0:01:07.63,en - 白色,,0,0,0,,This is something you surely learned at some point.
Dialogue: 0,0:01:05.41,0:01:07.63,zh - 黄色,,0,0,0,,你某个时候学过
Dialogue: 0,0:01:07.63,0:01:08.89,en - 白色,,0,0,0,,You might have forgotten it.
Dialogue: 0,0:01:07.63,0:01:08.89,zh - 黄色,,0,0,0,,可能忘了
Dialogue: 0,0:01:08.89,0:01:11.24,en - 白色,,0,0,0,,There's a whole link here if you want to read about why that's true.
Dialogue: 0,0:01:08.89,0:01:11.24,zh - 黄色,,0,0,0,,这个链接解释这为什么是真的
Dialogue: 0,0:01:11.89,0:01:17.62,en - 白色,,0,0,0,,And so we can say that the sum of the numbers 101 to 1,000
Dialogue: 0,0:01:11.89,0:01:17.62,zh - 黄色,,0,0,0,,所以我们可以说，数字101到1000的总和
Dialogue: 0,0:01:17.62,0:01:20.47,en - 白色,,0,0,0,,is going to be not that much bigger than this sum.
Dialogue: 0,0:01:17.62,0:01:20.47,zh - 黄色,,0,0,0,,不会比这个总和大很多
Dialogue: 0,0:01:20.47,0:01:22.50,en - 白色,,0,0,0,,Because those first 100 numbers aren't very large.
Dialogue: 0,0:01:20.47,0:01:22.50,zh - 黄色,,0,0,0,,因为前100个数字不是很大
Dialogue: 0,0:01:22.87,0:01:25.57,en - 白色,,0,0,0,,So this last little bit, we can approximate it
Dialogue: 0,0:01:22.87,0:01:25.57,zh - 黄色,,0,0,0,,最后一点点可以近似计算
Dialogue: 0,0:01:25.57,0:01:30.64,en - 白色,,0,0,0,,by just doing 1,000 times 1,000 plus 1 divided by 2,
Dialogue: 0,0:01:25.57,0:01:30.64,zh - 黄色,,0,0,0,,只要做1000 *(1000+1)/2
Dialogue: 0,0:01:30.64,0:01:31.79,en - 白色,,0,0,0,,which is around 500,000.
Dialogue: 0,0:01:30.64,0:01:31.79,zh - 黄色,,0,0,0,,也就是大约50万
Dialogue: 0,0:01:32.11,0:01:33.14,en - 白色,,0,0,0,,So that's one way to do it.
Dialogue: 0,0:01:32.11,0:01:33.14,zh - 黄色,,0,0,0,,这是一种方法
Dialogue: 0,0:01:34.93,0:01:36.32,en - 白色,,0,0,0,,So let's compare side by side.
Dialogue: 0,0:01:34.93,0:01:36.32,zh - 黄色,,0,0,0,,让我们并排比较一下
Dialogue: 0,0:01:37.07,0:01:39.36,en - 白色,,0,0,0,,This is what our S list was capable of.
Dialogue: 0,0:01:37.07,0:01:39.36,zh - 黄色,,0,0,0,,这是 SLList
Dialogue: 0,0:01:39.88,0:01:41.50,en - 白色,,0,0,0,,Whenever you insert into an S list,
Dialogue: 0,0:01:39.88,0:01:41.50,zh - 黄色,,0,0,0,,每当插入到 SLList 时
Dialogue: 0,0:01:41.85,0:01:43.09,en - 白色,,0,0,0,,what we show on the y-axis.
Dialogue: 0,0:01:41.85,0:01:43.09,zh - 黄色,,0,0,0,,y 轴上显示的内容
Dialogue: 0,0:01:43.31,0:01:46.21,en - 白色,,0,0,0,,is the total time to complete all of those inserts.
Dialogue: 0,0:01:43.31,0:01:46.21,zh - 黄色,,0,0,0,,是完成所有插入的总时间
Dialogue: 0,0:01:46.21,0:01:52.27,en - 白色,,0,0,0,,Some in other words, inserting 20,000 items in this theoretical plot took only 0.00002 seconds.
Dialogue: 0,0:01:46.21,0:01:52.27,zh - 黄色,,0,0,0,,换句话说，在这个理论图中插入2万项只用了0.00002秒
Dialogue: 0,0:01:52.49,0:01:55.07,en - 白色,,0,0,0,,Inserting 40,000 was 0.00004.
Dialogue: 0,0:01:52.49,0:01:55.07,zh - 黄色,,0,0,0,,插入4万是0.00004
Dialogue: 0,0:01:55.27,0:01:56.93,en - 白色,,0,0,0,,And this is a purely theoretical number.
Dialogue: 0,0:01:55.27,0:01:56.93,zh - 黄色,,0,0,0,,这是一个纯粹的理论数字
Dialogue: 0,0:01:56.93,0:01:58.08,en - 白色,,0,0,0,,This is not an actual experiment.
Dialogue: 0,0:01:56.93,0:01:58.08,zh - 黄色,,0,0,0,,这不是真正的实验
Dialogue: 0,0:01:58.51,0:01:59.89,en - 白色,,0,0,0,,However, if we ran an experiment,
Dialogue: 0,0:01:58.51,0:01:59.89,zh - 黄色,,0,0,0,,然而，如果我们做个实验
Dialogue: 0,0:01:59.89,0:02:01.83,en - 白色,,0,0,0,,we would really expect to get a straight line.
Dialogue: 0,0:01:59.89,0:02:01.83,zh - 黄色,,0,0,0,,真的希望得到一条直线
Dialogue: 0,0:02:02.39,0:02:09.79,en - 白色,,0,0,0,,So this straight line indicates that the operations for the S list are all constant time because the integral of a constant is a line.
Dialogue: 0,0:02:02.39,0:02:09.79,zh - 黄色,,0,0,0,,这条直线表明，SLList 的运算都是常数时间，因为常数的积分是一条直线
Dialogue: 0,0:02:10.69,0:02:13.99,en - 白色,,0,0,0,,By contrast, if we look at the A list, which is much slower--
Dialogue: 0,0:02:10.69,0:02:13.99,zh - 黄色,,0,0,0,,相比之下，看一下 AList，它的速度要慢得多
Dialogue: 0,0:02:14.35,0:02:17.82,en - 白色,,0,0,0,,and the focus of our attention right now and thus we get a bigger font--
Dialogue: 0,0:02:14.35,0:02:17.82,zh - 黄色,,0,0,0,,我们关注的焦点就是字体变得更大了...
Dialogue: 0,0:02:19.09,0:02:20.97,en - 白色,,0,0,0,,what we see is that it's actually a parabola.
Dialogue: 0,0:02:19.09,0:02:20.97,zh - 黄色,,0,0,0,,它实际上是一条抛物线
Dialogue: 0,0:02:21.38,0:02:25.73,en - 白色,,0,0,0,,So that inserting 20,000 items is not nearly as slow as 100,000 items.
Dialogue: 0,0:02:21.38,0:02:25.73,zh - 黄色,,0,0,0,,插入2万项远不如插入10万项慢
Dialogue: 0,0:02:25.73,0:02:27.64,en - 白色,,0,0,0,,And in fact, inserting 100,000 items,
Dialogue: 0,0:02:25.73,0:02:27.64,zh - 黄色,,0,0,0,,事实上，插入10万项
Dialogue: 0,0:02:27.64,0:02:30.28,en - 白色,,0,0,0,,if we do the exact same Wolfram Alpha type trick,
Dialogue: 0,0:02:27.64,0:02:30.28,zh - 黄色,,0,0,0,,如果我们同样使用 Wolfram Alpha
Dialogue: 0,0:02:30.28,0:02:34.03,en - 白色,,0,0,0,,we'll see it's around 5 billion new containers, new memory boxes.
Dialogue: 0,0:02:30.28,0:02:34.03,zh - 黄色,,0,0,0,,会看到大约50亿个新的容器，新的存储盒
Dialogue: 0,0:02:34.03,0:02:34.55,en - 白色,,0,0,0,,That's a lot.
Dialogue: 0,0:02:34.03,0:02:34.55,zh - 黄色,,0,0,0,,太多了
Dialogue: 0,0:02:35.36,0:02:38.05,en - 白色,,0,0,0,,And since computers operate at the speed of around gigahertz,
Dialogue: 0,0:02:35.36,0:02:38.05,zh - 黄色,,0,0,0,,由于计算机的运行速度约为千兆赫兹
Dialogue: 0,0:02:38.05,0:02:40.21,en - 白色,,0,0,0,,that is they do about a billion things per second,
Dialogue: 0,0:02:38.05,0:02:40.21,zh - 黄色,,0,0,0,,也就是每秒大约做10亿件事
Dialogue: 0,0:02:40.21,0:02:44.61,en - 白色,,0,0,0,,it's no big surprise that inserting 100,000 items took seconds.
Dialogue: 0,0:02:40.21,0:02:44.61,zh - 黄色,,0,0,0,,插入10万项需要几秒钟也就不足为奇了
Dialogue: 0,0:02:44.87,0:02:46.86,en - 白色,,0,0,0,,So if you think 5 billion divided by 1 billion,
Dialogue: 0,0:02:44.87,0:02:46.86,zh - 黄色,,0,0,0,,50亿除以10亿
Dialogue: 0,0:02:46.86,0:02:47.89,en - 白色,,0,0,0,,it's around 5 seconds.
Dialogue: 0,0:02:46.86,0:02:47.89,zh - 黄色,,0,0,0,,大约5秒
Dialogue: 0,0:02:48.03,0:02:49.23,en - 白色,,0,0,0,,My computer did a little better.
Dialogue: 0,0:02:48.03,0:02:49.23,zh - 黄色,,0,0,0,,我的电脑稍微好一点
Dialogue: 0,0:02:49.23,0:02:50.62,en - 白色,,0,0,0,,So it's a little faster than a gigahertz.
Dialogue: 0,0:02:49.23,0:02:50.62,zh - 黄色,,0,0,0,,它比千兆赫兹快一点
Dialogue: 0,0:02:50.93,0:02:52.20,en - 白色,,0,0,0,,Just a rough rule of thumb.
Dialogue: 0,0:02:50.93,0:02:52.20,zh - 黄色,,0,0,0,,这只是个粗略的经验
Dialogue: 0,0:02:52.55,0:02:55.63,en - 白色,,0,0,0,,And so this parabola actually tells us
Dialogue: 0,0:02:52.55,0:02:55.63,zh - 黄色,,0,0,0,,这条抛物线实际上告诉我们
Dialogue: 0,0:02:55.63,0:03:00.40,en - 白色,,0,0,0,,that as our list gets bigger, it takes longer and longer for the operations to complete.
Dialogue: 0,0:02:55.63,0:03:00.40,zh - 黄色,,0,0,0,,随着链表越来越大，完成操作所需的时间也越来越长
Dialogue: 0,0:03:00.83,0:03:03.20,en - 白色,,0,0,0,,In other words, the time per operation is linear.
Dialogue: 0,0:03:00.83,0:03:03.20,zh - 黄色,,0,0,0,,换句话说，每次操作的时间是线性的
Dialogue: 0,0:03:03.61,0:03:06.15,en - 白色,,0,0,0,,And the integral of a line is, of course, a parabola.
Dialogue: 0,0:03:03.61,0:03:06.15,zh - 黄色,,0,0,0,,直线的积分当然是抛物线
Dialogue: 0,0:03:06.52,0:03:09.99,en - 白色,,0,0,0,,And this right here is unacceptable.
Dialogue: 0,0:03:06.52,0:03:09.99,zh - 黄色,,0,0,0,,这是不可接受的
Dialogue: 0,0:03:06.99,0:03:09.99,翻译人员专属 - 片尾（左上角）,,0,0,0,, 翻译：@隐秀_（seriouszyx）
