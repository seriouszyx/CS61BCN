[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Audio File: 6-7 Basic Resizing Analysis.mp4
Video File: 6-7 Basic Resizing Analysis.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.500000
Scroll Position: 103
Active Line: 104

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: zh - 黄色,微软雅黑,60,&H0080FFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: en - 白色,Yu Gothic UI,45,&H00FFFFFF,&H000000FF,&H55000000,&H63000000,-1,0,0,0,100,100,0,0,1,4,0,2,3,3,16,1
Style: 翻译人员专属 - 左下角,微软雅黑,58,&H008DE3FF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,3,0,1,42,32,42,1
Style: 翻译人员专属 - 片尾（左上角）,微软雅黑,58,&H008DE3FF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,3,0,7,42,32,42,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:03.00,翻译人员专属 - 片尾（左上角）,,0,0,0,, 翻译：@隐秀_（seriouszyx）
Dialogue: 0,0:00:00.76,0:00:02.18,en - 白色,,0,0,0,,Now that we've implemented resize,
Dialogue: 0,0:00:00.76,0:00:02.18,zh - 黄色,,0,0,0,,我们已经实现了 resize
Dialogue: 0,0:00:02.18,0:00:03.78,en - 白色,,0,0,0,,our array list will work correctly.
Dialogue: 0,0:00:02.18,0:00:03.78,zh - 黄色,,0,0,0,,我们的数组链表正常工作
Dialogue: 0,0:00:03.78,0:00:07.52,en - 白色,,0,0,0,,So whatever we throw at it, it will properly handle the operations we ask it to do.
Dialogue: 0,0:00:03.78,0:00:07.52,zh - 黄色,,0,0,0,,无论我扔给它什么，它都会正确执行操作
Dialogue: 0,0:00:08.42,0:00:09.64,en - 白色,,0,0,0,,So let's do a little speed testing.
Dialogue: 0,0:00:08.42,0:00:09.64,zh - 黄色,,0,0,0,,所以来做个速度测试
Dialogue: 0,0:00:10.21,0:00:13.28,en - 白色,,0,0,0,,What I've got right here is a class called speed test Alist.
Dialogue: 0,0:00:10.21,0:00:13.28,zh - 黄色,,0,0,0,,这有一个叫 SpeedTestAList 的类
Dialogue: 0,0:00:13.28,0:00:17.36,en - 白色,,0,0,0,,It creates an Alist and then it adds 100,000 items to it using our addLast method.
Dialogue: 0,0:00:13.28,0:00:17.36,zh - 黄色,,0,0,0,,它创建一个 AList，然后用 addLast 方法添加100,000个项目
Dialogue: 0,0:00:17.90,0:00:21.05,en - 白色,,0,0,0,,I also have a similar test for the SLList from last time.
Dialogue: 0,0:00:17.90,0:00:21.05,zh - 黄色,,0,0,0,,我也对上次的 SLList 进行了类似的测试
Dialogue: 0,0:00:21.69,0:00:22.97,en - 白色,,0,0,0,,So I'll start by running that one.
Dialogue: 0,0:00:21.69,0:00:22.97,zh - 黄色,,0,0,0,,先运行那个
Dialogue: 0,0:00:22.97,0:00:24.77,en - 白色,,0,0,0,,I won't show the code because it's basically the same thing.
Dialogue: 0,0:00:22.97,0:00:24.77,zh - 黄色,,0,0,0,,我没展示代码，因为它们基本一样
Dialogue: 0,0:00:25.46,0:00:28.40,en - 白色,,0,0,0,,So when I do Java speed test SLList, we see it is very fast.
Dialogue: 0,0:00:25.46,0:00:28.40,zh - 黄色,,0,0,0,,执行 java SppedTestSLList，非常快
Dialogue: 0,0:00:28.77,0:00:32.99,en - 白色,,0,0,0,,In fact, I can use the Linux time Command to run it and see just how fast it is.
Dialogue: 0,0:00:28.77,0:00:32.99,zh - 黄色,,0,0,0,,事实上可以使用 Linux 的 time 命令来运行，看看有多快
Dialogue: 0,0:00:33.26,0:00:34.86,en - 白色,,0,0,0,,And we see that it is very fast indeed.
Dialogue: 0,0:00:33.26,0:00:34.86,zh - 黄色,,0,0,0,,我们看到它确实非常快
Dialogue: 0,0:00:35.99,0:00:39.12,en - 白色,,0,0,0,,By contrast, if we run the Alist speed test,
Dialogue: 0,0:00:35.99,0:00:39.12,zh - 黄色,,0,0,0,,相比之下，测试 AList 的速度
Dialogue: 0,0:00:39.47,0:00:41.88,en - 白色,,0,0,0,,we see it takes quite a long time-- three seconds.
Dialogue: 0,0:00:39.47,0:00:41.88,zh - 黄色,,0,0,0,,我们看到这需要相当长的时间，3秒
Dialogue: 0,0:00:42.35,0:00:46.54,en - 白色,,0,0,0,,Three seconds is actually quite a long time for a modern computer to add 100,000 items to a list
Dialogue: 0,0:00:42.35,0:00:46.54,zh - 黄色,,0,0,0,,对于一台现代计算机来说\N要将100,000项添加到一个链表中，3秒钟实际上是一段相当长的时间 
Dialogue: 0,0:00:46.85,0:00:49.18,en - 白色,,0,0,0,,and is obviously much worse than our SLList.
Dialogue: 0,0:00:46.85,0:00:49.18,zh - 黄色,,0,0,0,,显然比 SLList 要糟糕得多
Dialogue: 0,0:00:49.61,0:00:50.38,en - 白色,,0,0,0,,So why?
Dialogue: 0,0:00:49.61,0:00:50.38,zh - 黄色,,0,0,0,,为什么？
Dialogue: 0,0:00:51.26,0:00:54.54,en - 白色,,0,0,0,,Well, I've got a little puzzle for you to work our way towards understanding.
Dialogue: 0,0:00:51.26,0:00:54.54,zh - 黄色,,0,0,0,,有个小谜题来帮助我们理解
Dialogue: 0,0:00:55.28,0:00:57.23,en - 白色,,0,0,0,,So let's suppose we have a full array of size 100.
Dialogue: 0,0:00:55.28,0:00:57.23,zh - 黄色,,0,0,0,,假设有一个大小为100的满数组
Dialogue: 0,0:00:57.72,0:00:59.63,en - 白色,,0,0,0,,If we call addLast two times, the question is,
Dialogue: 0,0:00:57.72,0:00:59.63,zh - 黄色,,0,0,0,,如果调用 addLast 2次，问题是
Dialogue: 0,0:00:59.63,0:01:02.96,en - 白色,,0,0,0,,given that totally full array-- and we know it's going to have to resize twice--
Dialogue: 0,0:00:59.63,0:01:02.96,zh - 黄色,,0,0,0,,考虑数组已满，我们知道它将不得不 resize 2次
Dialogue: 0,0:01:03.54,0:01:09.54,en - 白色,,0,0,0,,how many total array memory boxes will we need to create and fill to actually accomplish what we want?
Dialogue: 0,0:01:03.54,0:01:09.54,zh - 黄色,,0,0,0,,我们总共需要创建和填充多少个数组内存盒子才能完成任务？
Dialogue: 0,0:01:10.46,0:01:11.69,en - 白色,,0,0,0,,And I have a bonus question here,
Dialogue: 0,0:01:10.46,0:01:11.69,zh - 黄色,,0,0,0,,还有个额外问题
Dialogue: 0,0:01:12.24,0:01:16.74,en - 白色,,0,0,0,,which is, what is the maximum number of array boxes that Java keeps track at any given time?
Dialogue: 0,0:01:12.24,0:01:16.74,zh - 黄色,,0,0,0,,在给定时间内，Java 保持跟踪的数组盒子最大数量是多少？
Dialogue: 0,0:01:17.14,0:01:19.52,en - 白色,,0,0,0,,And let's assume, in this case, that garbage collection--
Dialogue: 0,0:01:17.14,0:01:19.52,zh - 黄色,,0,0,0,,让我们假设，在这种情况下，垃圾回收...
Dialogue: 0,0:01:19.52,0:01:21.03,en - 白色,,0,0,0,,the thing where an object disappears--
Dialogue: 0,0:01:19.52,0:01:21.03,zh - 黄色,,0,0,0,,对象消失的地方...
Dialogue: 0,0:01:21.41,0:01:23.92,en - 白色,,0,0,0,,happens as soon as you lose the last reference to an object.
Dialogue: 0,0:01:21.41,0:01:23.92,zh - 黄色,,0,0,0,,在丢失对对象的最后一个引用时立即发生
Dialogue: 0,0:01:24.51,0:01:26.13,en - 白色,,0,0,0,,So maybe you pause the video and ponder this.
Dialogue: 0,0:01:24.51,0:01:26.13,zh - 黄色,,0,0,0,,暂停视频思考这一点
Dialogue: 0,0:01:27.87,0:01:31.81,en - 白色,,0,0,0,,So it turns out, for both of these, the correct answer is, in fact, 203.
Dialogue: 0,0:01:27.87,0:01:31.81,zh - 黄色,,0,0,0,,事实证明，这两个问题的正确答案是203
Dialogue: 0,0:01:31.81,0:01:32.38,en - 白色,,0,0,0,,Let's see why.
Dialogue: 0,0:01:31.81,0:01:32.38,zh - 黄色,,0,0,0,,看看原因
Dialogue: 0,0:01:33.15,0:01:35.52,en - 白色,,0,0,0,,So resizing twice requires us to do the following--
Dialogue: 0,0:01:33.15,0:01:35.52,zh - 黄色,,0,0,0,,resize 2次需要做以下操作
Dialogue: 0,0:01:35.98,0:01:39.25,en - 白色,,0,0,0,,the first time we resize, we create a new array of size 101,
Dialogue: 0,0:01:35.98,0:01:39.25,zh - 黄色,,0,0,0,,第一次 resize，创建大小为101的新数组
Dialogue: 0,0:01:39.25,0:01:43.75,en - 白色,,0,0,0,,we copy everything over, and that takes up 100 spaces here--
Dialogue: 0,0:01:39.25,0:01:43.75,zh - 黄色,,0,0,0,,把所有的东西都复制过来，占据了100个空间
Dialogue: 0,0:01:43.75,0:01:45.34,en - 白色,,0,0,0,,or we fill in 100 spaces.
Dialogue: 0,0:01:43.75,0:01:45.34,zh - 黄色,,0,0,0,,填充100个空格
Dialogue: 0,0:01:45.34,0:01:46.68,en - 白色,,0,0,0,,And then we finally fill in the last one.
Dialogue: 0,0:01:45.34,0:01:46.68,zh - 黄色,,0,0,0,,然后填上最后一个
Dialogue: 0,0:01:47.05,0:01:48.76,en - 白色,,0,0,0,,So that's 101 create and fills.
Dialogue: 0,0:01:47.05,0:01:48.76,zh - 黄色,,0,0,0,,这就是101的创建和填充
Dialogue: 0,0:01:49.28,0:01:52.88,en - 白色,,0,0,0,,We then repeat the exact same process, but now for 102.
Dialogue: 0,0:01:49.28,0:01:52.88,zh - 黄色,,0,0,0,,然后对102重复完全相同的过程
Dialogue: 0,0:01:52.88,0:01:58.51,en - 白色,,0,0,0,,And so in this case, we can say that the total number of array memory boxes that are created and filled is 203.
Dialogue: 0,0:01:52.88,0:01:58.51,zh - 黄色,,0,0,0,,因此在本例中，可以说创建和填充的数组内存盒子总数为203
Dialogue: 0,0:01:59.41,0:02:04.82,en - 白色,,0,0,0,,Likewise, the most array memory boxes that we have to keep track of at any given time is also 203.
Dialogue: 0,0:01:59.41,0:02:04.82,zh - 黄色,,0,0,0,,同样，在给定时间内，跟踪的最多数组内存盒子也是203
Dialogue: 0,0:02:05.17,0:02:08.65,en - 白色,,0,0,0,,You might say, at first, like, aren't all of these arrays around?
Dialogue: 0,0:02:05.17,0:02:08.65,zh - 黄色,,0,0,0,,你可能会说，开始时不是这些数组都在吗？
Dialogue: 0,0:02:08.65,0:02:10.75,en - 白色,,0,0,0,,But remember that during the copying process,
Dialogue: 0,0:02:08.65,0:02:10.75,zh - 黄色,,0,0,0,,请记住，在复制过程中
Dialogue: 0,0:02:10.75,0:02:16.64,en - 白色,,0,0,0,,as soon as we finished copying everything from this array to this one, we can throw this array away.
Dialogue: 0,0:02:10.75,0:02:16.64,zh - 黄色,,0,0,0,,一旦我们完成了从这个数组到这个数组的复制，就可以丢弃这个数组了
Dialogue: 0,0:02:17.08,0:02:20.25,en - 白色,,0,0,0,,So in the worst case, you'll just have two copies of the array laying around,
Dialogue: 0,0:02:17.08,0:02:20.25,zh - 黄色,,0,0,0,,在最坏的情况下，你只会有2份数组的副本
Dialogue: 0,0:02:20.25,0:02:21.86,en - 白色,,0,0,0,,and you won't have a whole bunch of them.
Dialogue: 0,0:02:20.25,0:02:21.86,zh - 黄色,,0,0,0,,不会有所有东西
Dialogue: 0,0:02:23.26,0:02:24.00,en - 白色,,0,0,0,,Harder puzzle.
Dialogue: 0,0:02:23.26,0:02:24.00,zh - 黄色,,0,0,0,,更难的问题
Dialogue: 0,0:02:24.61,0:02:26.71,en - 白色,,0,0,0,,Let's suppose now we have a full array of size 100.
Dialogue: 0,0:02:24.61,0:02:26.71,zh - 黄色,,0,0,0,,假设有一个大小为100的满数组
Dialogue: 0,0:02:27.34,0:02:30.65,en - 白色,,0,0,0,,And now, let's say we call addLast until size is equal to 1,000.
Dialogue: 0,0:02:27.34,0:02:30.65,zh - 黄色,,0,0,0,,调用 addLast 直到 size 等于1,000
Dialogue: 0,0:02:31.21,0:02:34.60,en - 白色,,0,0,0,,Roughly how many total array memory boxes will we need to create and fill?
Dialogue: 0,0:02:31.21,0:02:34.60,zh - 黄色,,0,0,0,,我们总共需要创建和填充多少个数组内存盒子？
Dialogue: 0,0:02:35.08,0:02:36.25,en - 白色,,0,0,0,,So ponder this question.
Dialogue: 0,0:02:35.08,0:02:36.25,zh - 黄色,,0,0,0,,仔细考虑这个问题
Dialogue: 0,0:02:36.85,0:02:39.75,en - 白色,,0,0,0,,I will now end the video in order to encourage you to actually do this problem.
Dialogue: 0,0:02:36.85,0:02:39.75,zh - 黄色,,0,0,0,,我现在要结束这段视频，以鼓励你们真的做这道题
Dialogue: 0,0:02:40.12,0:02:41.67,en - 白色,,0,0,0,,And there's the bonus question again,
Dialogue: 0,0:02:40.12,0:02:41.67,zh - 黄色,,0,0,0,,这又是一个附加问题
Dialogue: 0,0:02:41.67,0:02:43.74,en - 白色,,0,0,0,,and I'll see you in that video.
Dialogue: 0,0:02:41.67,0:02:43.74,zh - 黄色,,0,0,0,,下个视频见
Dialogue: 0,0:02:41.74,0:02:43.74,翻译人员专属 - 片尾（左上角）,,0,0,0,, 翻译：@隐秀_（seriouszyx）
